'use strict';

module.exports = extend;

function extend(origin, add, deep) {
  if (!add || origin.constructor !== Object) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    if (
      deep === true &&
      origin[keys[i]] &&
      origin[keys[i]].constructor === Object &&
      add[keys[i]].constructor === Object
    ) {
      origin[keys[i]] = extend(origin[keys[i]], add[keys[i]], deep);
    } else {
      origin[keys[i]] = add[keys[i]];
    }
  }
  return origin;
}

//   convertColorCode: convertColorCode
// function convertColorCode(code, outputType) {
//   //output:
//   // hex: #808080
//   // rgba: rgba(128,128,128,1)
//   // matrix: [0.5, 0.5, 0.5, 1.0]
//   var codeArray = [];

//   if (typeof code === 'string') {
//     // hex
//     if (code.match(/^#((?:[\da-f]{3}){1,2})$/i) !== null) {
//       // parseInt('', 16);
//     }

//     //rgb
//     else if (code.match(/rgb\(([\d]{1,3}){3,4}\)/) === 0) {

//     }

//     //rgba
//     // else if () {

//     // }
//   }

//   var outputCode;

//   return outputCode;
// }
